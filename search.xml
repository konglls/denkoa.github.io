<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SpringBoot+mybatis+redis整合遇到的坑</title>
    <url>/posts/25308/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol>
<li>开发者工具</li>
<li>Consider defining a bean of type ‘xx.xx.xx.dao.xxMapper’ in your configuration.</li>
<li>mybatis代码自动生成工具Exception getting JDBC Driver</li>
<li>数据存入redis 序列化的问题</li>
<li>maven执行install时自动运行mybatis-generator插件</li>
</ol>
<a id="more"></a>

<h2 id="开发工具及环境"><a href="#开发工具及环境" class="headerlink" title="开发工具及环境"></a>开发工具及环境</h2><p>工具：IDEA</p>
<p>环境：SpringBoot、mybatis、JDK11、MySQL80、redis</p>
<h2 id="坑一：Consider-defining-a-bean-of-type-‘xx-xx-xx-dao-xxMapper’-in-your-configuration"><a href="#坑一：Consider-defining-a-bean-of-type-‘xx-xx-xx-dao-xxMapper’-in-your-configuration" class="headerlink" title="坑一：Consider defining a bean of type ‘xx.xx.xx.dao.xxMapper’ in your configuration."></a>坑一：Consider defining a bean of type ‘xx.xx.xx.dao.xxMapper’ in your configuration.</h2><p>网上的解决方法大概有三种：</p>
<ol>
<li>在每个Mapper类上添加注解@Mapper，如</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteByPrimaryKey</span><span class="params">(String testId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Test record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Test <span class="title">selectByPrimaryKey</span><span class="params">(String testId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Test&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKey</span><span class="params">(Test record)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在SpringBoot启动类上添加注解@MapperScan(“xx.xx.xx.dao”)，引号内容是Mapper类所在的包名，如</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.gwg.bwtgame.dao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TestApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在SpringBoot启动类上添加注解@ComponentScan( “xx.xx.xx.dao”)。注意此注解可以同时扫描多个包，格式为：@ComponentScan( {“xx.xx.xx.dao”, “xx.xx.xx.entity”})</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"xx.xx.xx.dao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApplication</span> </span>&#123;s</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TestApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原因：bean注入失败，启动类和相应的包名没在同一级目录下，注解@SpringBootApplication只能扫描同级目录下以及子目录下的包。以下是正确的：</p>
<p><img src="/posts/25308/%E5%90%8C%E7%BA%A7%E7%9B%AE%E5%BD%95.jpg" alt="目录"></p>
<p>如果经过上述过程还没解决，请看一下你的maven是不是在使用IDEA默认的，如果是请自己下一个，改为自己的，IDEA默认的maven可能会有版本问题——这是在一个论坛上看到的，因为已经过去了一段时间，所以找不到那个网页了。我就是因为这个原因整整卡了两天。</p>
<h2 id="坑二：mybatis代码自动生成工具Exception-getting-JDBC-Driver"><a href="#坑二：mybatis代码自动生成工具Exception-getting-JDBC-Driver" class="headerlink" title="坑二：mybatis代码自动生成工具Exception getting JDBC Driver"></a>坑二：mybatis代码自动生成工具Exception getting JDBC Driver</h2><p>这个是在使用mybatis-generator工具时遇到的，一直报错找不到JDBC驱动类，之后网上搜需要在pom文件里将generator插件改为如下配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--以下dependencies标签中的内容是添加的内容--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>src/main/resources/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="坑三：数据存入redis-序列化的问题"><a href="#坑三：数据存入redis-序列化的问题" class="headerlink" title="坑三：数据存入redis 序列化的问题"></a>坑三：数据存入redis 序列化的问题</h2><p>从<a href="https://www.imooc.com/video/11823" rel="external nofollow noopener noreferrer" target="_blank">慕课视频</a>开始学的redis缓存，然后又结合网上的例子开始写了。</p>
<p>一开始开始采用重写RedisTemplete和自编RedisUtil工具类的方法去写，然后这种方法很难(可能是我不知道)与mybatis结合，必须自己实现dao接口。</p>
<p>然后采用注解@Cacheable方式，这就很方便了，可以很容易结合mybatis。然后问题来了在@Cacheable( value=”test”,key=”‘getById’+#id”)是一直报错，一直说参数无法序列化：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DefaultSerializer requires a Serializable payload but received an object of type</span><br></pre></td></tr></table></figure>

<p>参数id类型为int甚至改为了String，都不行，然后网上找解决方法在<a href="https://www.cnblogs.com/cjsblog/p/9150482.html" rel="external nofollow noopener noreferrer" target="_blank">这里</a>直接将博主的RedisConfig配置类复制后就可以了，以下是我的和博主的对比：</p>
<p>我的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xx.xx.xx.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.interceptor.KeyGenerator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheWriter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.JdkSerializationRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span> <span class="comment">//开启注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisCacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span>&#123;</span><br><span class="line">        RedisCacheConfiguration redisCacheConfiguration=RedisCacheConfiguration.defaultCacheConfig();</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer=<span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        redisCacheConfiguration.serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer));</span><br><span class="line">        redisCacheConfiguration.serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> StringRedisSerializer()));</span><br><span class="line">        <span class="keyword">return</span> RedisCacheManager</span><br><span class="line">                .builder(RedisCacheWriter.nonLockingRedisCacheWriter(redisConnectionFactory))</span><br><span class="line">                .cacheDefaults(redisCacheConfiguration).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String,Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        StringRedisSerializer stringRedisSerializer=<span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer=<span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        RedisTemplate&lt;String ,Object&gt; redisTemplate=<span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        redisTemplate.setEnableTransactionSupport(<span class="keyword">true</span>);</span><br><span class="line">        ObjectMapper objectMapper=<span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL,JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line"></span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        redisTemplate.setHashKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash类型配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HashOperations&lt;String, String, Object&gt; <span class="title">hashOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对redis字符串类型数据操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ValueOperations&lt;String, Object&gt; <span class="title">valueOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对链表类型的数据操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListOperations&lt;String, Object&gt; <span class="title">listOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对无序集合类型的数据操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SetOperations&lt;String, Object&gt; <span class="title">setOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对有序集合类型的数据操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZSetOperations&lt;String, Object&gt; <span class="title">zSetOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>博主的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xx.xx.xx.config;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheWriter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisConnectionFactory redisConnectionFactory;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; serializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;Object&gt;(Object.class);</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        serializer.setObjectMapper(objectMapper);</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        redisTemplate.setValueSerializer(serializer);</span><br><span class="line">        redisTemplate.setHashKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        redisTemplate.setHashValueSerializer(serializer);</span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisCacheManager <span class="title">redisCacheManager</span><span class="params">(RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        RedisCacheWriter redisCacheWriter = RedisCacheWriter.nonLockingRedisCacheWriter(redisTemplate.getConnectionFactory());</span><br><span class="line">        RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(redisTemplate.getValueSerializer()));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisCacheManager(redisCacheWriter, redisCacheConfiguration);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二者选其一即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @Bean</span></span><br><span class="line"><span class="comment">//    public RedisCacheConfiguration redisCacheConfiguration() &#123;</span></span><br><span class="line"><span class="comment">//        Jackson2JsonRedisSerializer&lt;Object&gt; serializer = new Jackson2JsonRedisSerializer&lt;Object&gt;(Object.class);</span></span><br><span class="line"><span class="comment">//        ObjectMapper objectMapper = new ObjectMapper();</span></span><br><span class="line"><span class="comment">//        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span></span><br><span class="line"><span class="comment">//        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span></span><br><span class="line"><span class="comment">//        serializer.setObjectMapper(objectMapper);</span></span><br><span class="line"><span class="comment">//        return RedisCacheConfiguration.defaultCacheConfig().serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(serializer));</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在还是有点迷糊，不知道哪里配置不对了，key和value也都设置了序列化机制，但不知为什么不生效。不过现在是可以了，以后再研究。</p>
<h2 id="坑四：maven执行install时自动运行mybatis-generator插件"><a href="#坑四：maven执行install时自动运行mybatis-generator插件" class="headerlink" title="坑四：maven执行install时自动运行mybatis-generator插件"></a>坑四：maven执行install时自动运行mybatis-generator插件</h2><p>后台代码写了个测试demo，可运行，想想着打包在服务器上运行试试，然后maven的clean、install，打包成功，有warning，没管，然后本地运行，报错找不到mapper类的bean，然后去看mapper的配置文件，发现里边有两个一模一样的bean，熟悉的配方，确认是代码生成工具的锅，删掉多余的，运行成功，然后又clean、install、运行有报错、找不到bean、看来是generator工具会自动在install时运行，找资料，相关博文貌似不是很多，但还是解决了一下摘自<a href="https://blog.csdn.net/luckyxl029/article/details/77180285" rel="external nofollow noopener noreferrer" target="_blank">使用mybatis-generator插件后的maven打包问题</a>:</p>
<p>原因：是因为mybatis-generator插件默认绑定了package的生命周期</p>
<p>解决：在pom中手动设置一下mybatis-generator插件绑定的生命周期即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    		<span class="comment">&lt;!--解决mybatis代码自动生成工具随maven打包运行的问题--&gt;</span></span><br><span class="line">    			<span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">  					<span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">       				<span class="tag">&lt;<span class="name">id</span>&gt;</span>Generate MyBatis Artifacts<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       				<span class="tag">&lt;<span class="name">phase</span>&gt;</span>deploy<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">goal</span>&gt;</span>generate<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>src/main/resources/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
        <tag>mybatis</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>后端蓝牙开发包bluecove 2.1.2版本</title>
    <url>/posts/10735/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>这几天跟老师要了上届学长写的代码参考学习，涉及到后端的蓝牙开发，用到了net.sf.bluecove包，这个本来没什么问题，自己慢慢学就好了，有问题的是学长用的2.1.1版本，官方只提供到了2.1.0版本(<a href="https://search.maven.org/search?q=bluecove" rel="external nofollow noopener noreferrer" target="_blank">maven搜索引擎</a>，<a href="http://bluecove.org/" rel="external nofollow noopener noreferrer" target="_blank">官网</a>)，而其中的一个关键API( RemoteDeviceHelper.readRSSI，用来连续获取蓝牙设备的RSSI值)，官方版本中并没有提供。<a id="more"></a></p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>试着换了几个官方版本都没有那个API，然后找资料，在这篇<a href="https://blog.csdn.net/old_me_mory/article/details/18962701" rel="external nofollow noopener noreferrer" target="_blank">博文</a>里看到了解决方法，然后顺着这条线索，终于找到了能用的版本2.1.2，也有<a href="http://snapshot.bluecove.org/distribution/download/2.1.1-SNAPSHOT/2.1.1-SNAPSHOT.62/" rel="external nofollow noopener noreferrer" target="_blank">2.1.1</a>版本，但无法下载。</p>
<p>点此<a href="/downloadfiles/bluecove-2.1.2.jar">下载2.1.2版本</a>。</p>
<p>另外复习下maven将本地jar包加入到本地仓库的命令</p>
<blockquote>
<p>mvn install:install-file  -Dfile = “D:\java\bluecove-2.1.2.jar” -DgroupId=net.sf.blucove -DartifactId= bluecove -Dversion = 2.1.2 -Dpackaging = jar</p>
</blockquote>
<p>参数：</p>
<blockquote>
<p>Dfile: 本地包的全路径，包括文件名</p>
<p>DgroupId:  设置项目代码的包名 </p>
<p>DartifactId: 设置项目名或模块名</p>
<p>Dversion: 版本号</p>
<p>Dpackaging: 文件类型</p>
</blockquote>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>bluecove</tag>
      </tags>
  </entry>
  <entry>
    <title>后端与移动端对接遇到的问题</title>
    <url>/posts/18232/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>之前学后端一直是与Web页面交互，然后最近需要与移动度交互，有点陌生，就问学Android的同学是怎样交换数据的，他说根据url获取数据，json格式。感觉和Web的交互方式差不多，除了json格式，原先没用过。然后就看了下怎样用json交换数据，正好项目用的是ssm框架，@RequestBody和@ResponseBody可以实现json数据与实体类的相互转换，就偷了懒，反正只要key与属性名保持一致就行，还不用自己去拼接了。然后这几天与同学对接时遇到了问题，就测试登录，然后可以连上服务器，但一登陆就崩。不知道咋回事。之后，同学调试时发现得到了415错误，媒体类型不支持，相互确认都用了json传输接收数据，还是不行。<a id="more"></a></p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>第二天又凑到一起搞这个时，突然发现我后端的后台有报错，也是媒体类型错误，同时报错不支持<code>Content-Type=application/x-www-form-urlencoded</code>，这才算知道问题出在了哪里，接收、发送数据的编码格式不对，我后端的代码要求的是<code>Content-Type=application/json</code>（貌似用了那两个注解也只能这样？），知道了问题在哪就好办了，不过也还是弄了一下午，因为同学用了不太熟悉的依赖，查了半天也不知道怎么设置，最终又改回了之前熟悉的才解决问题，不过还好，只是换依赖花的时间长，另外，他之前只是在写页面没有对数据进行处理，所以改动不是很大，不像我后端已经把数据搞好了，要改的话还得大改。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><p>基础不扎实，毕竟半路出家，没有经过系统的学习。</p>
</li>
<li><p>出错一定要看后台，不管是否是自己这边的错误。就比如这个问题，要是我早点看后台也不至于第二天才发现这个问题。</p>
</li>
<li><p>与他人沟通时，一些细节性的东西一定要确认清楚。</p>
</li>
</ol>
<h2 id="另："><a href="#另：" class="headerlink" title="另："></a>另：</h2><p>用了那两个注解不能传空值null，会报错，一般情况下如果拼接json数据的话不会产生这种情况毕竟自己手打，毕竟可以确定键值不为空。还没想到什么好方法，以后想到了再更新吧。</p>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>上述问题解决方法：</p>
<p> 一个Result类：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>方法</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>Result();      (构造函数初始化result和data)</td>
</tr>
<tr>
<td>private String result;</td>
<td>getter/setter</td>
</tr>
<tr>
<td>private TbUser data;</td>
<td>getter/setter</td>
</tr>
</tbody></table>
<p>请求形式：（PS:请求不用这么麻烦，我这里是为了测试@RequestBody能否接受嵌套数据）</p>
<p><img src="/posts/18232/%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82.png" alt="请求数据"></p>
<p>返回数据形式：</p>
<p><img src="/posts/18232/%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE.png" alt="返回数据"></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo文章同时部署到github和个人服务器</title>
    <url>/posts/1599/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="具体情况"><a href="#具体情况" class="headerlink" title="具体情况"></a>具体情况</h2><p>之前这个博客网站一直在<a href="https://kuke-z.github.io" rel="external nofollow noopener noreferrer" target="_blank">Github(kuke-z.github.io)</a>上托管，这两天花钱买了域名<a href="https://kkmblog.com" rel="external nofollow noopener noreferrer" target="_blank">kkmblog.com</a>又买了空间，想着</p>
<p>同时部署在GitHub和服务器上。具体服务器端环境搭建可参考这篇博文：<a href="https://www.pisho.com.cn/2018/12/18/CentOS7-Nginx-本地git-hexo建站过程/" rel="external nofollow noopener noreferrer" target="_blank">CentOS7+Nginx+本地git+hexo建站过程</a>。服务器端配置好后要从本地发布到服务器上遇到了问题，因为已经部署到过GitHub，所以全局_config.yml配置文件中deploy下的repo路径已经有了GitHub仓库的路径，不知道怎么添加服务器的路径。<a id="more"></a></p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>看了很多博客，都是在介绍如何用多台机器部署到同一个站点的解决方法，最终找到了<a href="https://www.cnblogs.com/compassblog/p/8922624.html" rel="external nofollow noopener noreferrer" target="_blank">这篇博文</a>，在设置路径时采用了如下方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type:git</span><br><span class="line">  repository:</span><br><span class="line">    github: 路径</span><br><span class="line">    coding: 路径</span><br></pre></td></tr></table></figure>

<p>然后我将coding改为名字(myserver)，应该是其他名字也可以，然后填入路径<code>git@your_ip:url</code>，其中url是服务器上你的git版本库的根目录的绝对路径。测试，OK!</p>
<p>PS:刚才搜索“hexo GitHub和coding”，搜出了很多同类文章，应该是我之前的搜索条件有问题。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Navicat 12.1.*版本注册</title>
    <url>/posts/62890/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>之前MySQL数据库可视化界面一直用的是MySQL Workbench，虽然知道Navicat Premium很好用，但一直不怎么爱折腾，就没搞这个，毕竟不是个免费软件用还得注册破解。今天数据库课上老师又提到了Navicat，就在课后下载下来试了试。以下是安装破解过程：<a id="more"></a></p>
<blockquote>
<p>首先在官网下载<a href="https://navicat.com.cn/download/navicat-premium" rel="external nofollow noopener noreferrer" target="_blank">试用</a>版本,安装；</p>
</blockquote>
<blockquote>
<p>在从<a href="https://github.com/Deltafox79/Navicat_Keygen" rel="external nofollow noopener noreferrer" target="_blank">GitHub</a>获得注册机，这个是源码，用vs写的，需要用vs编译一下，我用的是vs2019，无报错。另外说明一下用源码编译的原因，有的教程里也提供了这个注册机，但有可能已经过时了（尝试过程中的教训），不支持最新版本的Navicat Premium，但这个项目一直在维护，所以还是自己编译一下的好，另外也可以从<a href="https://dfox.it/DeFconX/files/file/79-navicat-software/" rel="external nofollow noopener noreferrer" target="_blank">这里</a>获得已编译好的软件（不知道是不是最新的）。然后以管理员方式运行编译好的软件：Navicat_Keygen_Patch_By_DFoX.exe。</p>
</blockquote>
<blockquote>
<p>之后的内容就可以参考<a href="https://www.jianshu.com/p/5f693b4c9468" rel="external nofollow noopener noreferrer" target="_blank">这篇博文</a>。按步骤一步步来就好。</p>
</blockquote>
<p>另外在使用的时候确实感觉Navicat确实要比workbench用着舒服。</p>
<ol>
<li>首先他支持中文界面，这就很友好了，workbench自己汉化或者是用别人汉化好的文件汉化都有可能使workbench崩溃（—__—），只能用英文版，虽然平时够用了，但英文界面总有点膈应；</li>
<li>再者就是使用过程中很流畅，要比workbench流畅很多，启动workbench时间要比Navicat长，界面加载也有卡顿，使用的时候也有卡顿，而Navicat要好很多。</li>
<li>另外，之前我看到过因为MySQL升级为8.0版本之后，由于修改了密码加密方式，Navicat可能连接不上，现在使用的时候并没有遇到这种情况。</li>
</ol>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Navicat</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo图片显示问题解决方法</title>
    <url>/posts/11424/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="不显示表现"><a href="#不显示表现" class="headerlink" title="不显示表现"></a>不显示表现</h2><p>根据网上教程装了<code>hexo-asset-image</code> ，图片路径正确，但图片仍然无法显示，前端调试器报错404。</p>
<a id="more"></a>

<h2 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h2><p>中间换过几个不同的版本，不能解决问题。</p>
<p>然后是修改<code>hexo-asset-image</code> 的<a href="https://www.jianshu.com/p/3db6a61d3782" rel="external nofollow noopener noreferrer" target="_blank">data.permalink</a>同样不行。</p>
<p>今天偶然看到一个关于<a href="https://blog.csdn.net/u014253173/article/details/81088518" rel="external nofollow noopener noreferrer" target="_blank">Hexo更新</a>文章，就在某种强迫症的心理作用下对Hexo进行了全局更新<code>npm i hexo-cli -g</code>，然后本地调试就神奇的发现图片可以显示了，再去看<code>hexo-asset-image</code>的<code>data.permalink</code>发现已经回到了默认状态，通过浏览器的前端调试器发现图片的url路径已经发生了变化这是更新后的路径：<img src="/posts/11424/%E6%9B%B4%E6%96%B0%E5%90%8E%E7%9A%84%E8%B7%AF%E5%BE%84.jpg" alt="更新后的">更新前的都是<code>src=&quot;a/5.jpg&quot;</code>。</p>
<p>至此，图片可以显示。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>音视频测试</title>
    <url>/posts/60596/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="音频视频测试"><a href="#音频视频测试" class="headerlink" title="音频视频测试"></a>音频视频测试</h1><a id="more"></a>

<h1 id="单曲"><a href="#单曲" class="headerlink" title="单曲"></a>单曲</h1>
    <div id="aplayer-LTopwjGX" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="16607987" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>



<h1 id="歌单"><a href="#歌单" class="headerlink" title="歌单"></a>歌单</h1>
    <div id="aplayer-Cmlmkrgm" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="2410118238" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div>



<h1 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h1><p>调试时加载很快，但放到服务器或GitHub上很慢或者干脆加载不出来 ( ~ _ ~ ) 。</p>
<h2 id="本地视频"><a href="#本地视频" class="headerlink" title="本地视频"></a>本地视频</h2><iframe src="video.mp4" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
## 第三方视频

<iframe src="//player.bilibili.com/player.html?aid=2188740&cid=3399512&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>AAAAA</title>
    <url>/posts/18312/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="a"><a href="#a" class="headerlink" title="a"></a>a</h1><p>second blog.</p>
<h2 id="b"><a href="#b" class="headerlink" title="b"></a>b</h2><a id="more"></a>

<ul>
<li>sa</li>
<li>ad</li>
</ul>
<blockquote>
<p>daadfa</p>
</blockquote>
<p><img src="/posts/18312/5.jpg" alt="成龙"></p>
<p><strong>ASDF</strong></p>
<p><em>asd</em></p>
<table>
<thead>
<tr>
<th>tables</th>
<th>Are</th>
<th>Cool</th>
</tr>
</thead>
<tbody><tr>
<td>asdf</td>
<td>asd</td>
<td>asdf</td>
</tr>
</tbody></table>
<p><code>package com.test;</code></p>
<p><code>adf</code></p>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> register;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.awt.EventQueue;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.swing.JFrame;  </span><br><span class="line"><span class="keyword">import</span> javax.swing.JButton;  </span><br><span class="line"><span class="keyword">import</span> javax.swing.JTextField;  </span><br><span class="line"><span class="keyword">import</span> javax.swing.JLabel;  </span><br><span class="line"><span class="keyword">import</span> javax.swing.JOptionPane;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.awt.Font;  </span><br><span class="line"><span class="keyword">import</span> javax.swing.JPasswordField;  </span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseAdapter;  </span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseEvent;  </span><br><span class="line"><span class="keyword">import</span> java.awt.Toolkit;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Register</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> JFrame frame;  </span><br><span class="line">    <span class="keyword">private</span> JTextField textField;  </span><br><span class="line">    <span class="keyword">private</span> JPasswordField passwordField;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * Launch the application. </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        EventQueue.invokeLater(<span class="keyword">new</span> Runnable() &#123;  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">                <span class="keyword">try</span> &#123;  </span><br><span class="line">                    Register window = <span class="keyword">new</span> Register();  </span><br><span class="line">                    window.frame.setVisible(<span class="keyword">true</span>);  </span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">                    e.printStackTrace();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * Create the application. </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Register</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        initialize();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * Initialize the contents of the frame. </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        frame = <span class="keyword">new</span> JFrame(<span class="string">"Register"</span>);  </span><br><span class="line">        frame.setBounds(<span class="number">100</span>, <span class="number">100</span>, <span class="number">450</span>, <span class="number">300</span>);  </span><br><span class="line">        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  </span><br><span class="line">        frame.getContentPane().setLayout(<span class="keyword">null</span>);  </span><br><span class="line">          </span><br><span class="line">        JButton button = <span class="keyword">new</span> JButton(<span class="string">"\u6CE8\u518C"</span>);  </span><br><span class="line">        button.setBounds(<span class="number">188</span>, <span class="number">203</span>, <span class="number">93</span>, <span class="number">23</span>);  </span><br><span class="line">        frame.getContentPane().add(button);  </span><br><span class="line">        button.addMouseListener(<span class="keyword">new</span> MouseAdapter() &#123;  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mousePressed</span><span class="params">(MouseEvent e)</span> </span>&#123;  </span><br><span class="line">                click();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;);  </span><br><span class="line">          </span><br><span class="line">        JLabel label = <span class="keyword">new</span> JLabel(<span class="string">"\u7528\u6237\u540D"</span>);  </span><br><span class="line">        label.setFont(<span class="keyword">new</span> Font(<span class="string">"宋体"</span>, Font.PLAIN, <span class="number">14</span>));  </span><br><span class="line">        label.setBounds(<span class="number">115</span>, <span class="number">56</span>, <span class="number">72</span>, <span class="number">20</span>);  </span><br><span class="line">        frame.getContentPane().add(label);  </span><br><span class="line">          </span><br><span class="line">        JLabel label_1 = <span class="keyword">new</span> JLabel(<span class="string">"\u5BC6\u7801"</span>);  </span><br><span class="line">        label_1.setFont(<span class="keyword">new</span> Font(<span class="string">"宋体"</span>, Font.PLAIN, <span class="number">14</span>));  </span><br><span class="line">        label_1.setBounds(<span class="number">115</span>, <span class="number">106</span>, <span class="number">72</span>, <span class="number">20</span>);  </span><br><span class="line">        frame.getContentPane().add(label_1);  </span><br><span class="line">          </span><br><span class="line">        textField = <span class="keyword">new</span> JTextField();  </span><br><span class="line">        textField.setBounds(<span class="number">196</span>, <span class="number">53</span>, <span class="number">128</span>, <span class="number">26</span>);  </span><br><span class="line">        frame.getContentPane().add(textField);  </span><br><span class="line">        textField.setColumns(<span class="number">10</span>);  </span><br><span class="line">          </span><br><span class="line">        passwordField = <span class="keyword">new</span> JPasswordField();  </span><br><span class="line">        passwordField.setBounds(<span class="number">196</span>, <span class="number">106</span>, <span class="number">128</span>, <span class="number">26</span>);  </span><br><span class="line">        frame.getContentPane().add(passwordField);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            String password=String.valueOf(passwordField.getPassword());  </span><br><span class="line">            Password pw=<span class="keyword">new</span> Password(password);  </span><br><span class="line">            pw.ExceptionCatch();  </span><br><span class="line">        &#125;<span class="keyword">catch</span>(NumberRangeException e) &#123;  </span><br><span class="line">            JOptionPane.showMessageDialog(<span class="keyword">null</span>,<span class="string">"密码个数不符合规定"</span>);  </span><br><span class="line">        &#125;<span class="keyword">catch</span> (NotAllNumExpection e) &#123;  </span><br><span class="line">            JOptionPane.showMessageDialog(<span class="keyword">null</span>,<span class="string">"密码应该只有数字"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">&#125;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Password</span></span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> String password;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Password</span><span class="params">(String str)</span> </span>&#123;  </span><br><span class="line">        password=str;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPasseord</span><span class="params">(String str)</span> </span>&#123;  </span><br><span class="line">        password=str;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> password;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ExceptionCatch</span><span class="params">()</span> <span class="keyword">throws</span> NumberRangeException,NotAllNumExpection</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(password.length()&lt;<span class="number">3</span>||password.length()&gt;<span class="number">6</span>) &#123;  </span><br><span class="line">      </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NumberRangeException();   </span><br><span class="line">        &#125;  </span><br><span class="line">          </span><br><span class="line">              </span><br><span class="line">        <span class="keyword">if</span>(!password.matches(<span class="string">"[0-9]&#123;1,&#125;"</span>))  <span class="comment">//正则表达式判断是否是纯数字字符串  </span></span><br><span class="line">            &#123;  </span><br><span class="line">                  </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NotAllNumExpection();  </span><br><span class="line">            &#125;  </span><br><span class="line">          </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isNumeric</span><span class="params">(String tmp)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumberRangeException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;  </span><br><span class="line">    NumberRangeException()  </span><br><span class="line">    &#123;  </span><br><span class="line">        System.out.print(<span class="string">"NumberRangeException:4~6"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">&#125;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotAllNumExpection</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;  </span><br><span class="line">    NotAllNumExpection()  </span><br><span class="line">    &#123;  </span><br><span class="line">        System.out.print(<span class="string">"NotAllNumExpection:password is expected number"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
